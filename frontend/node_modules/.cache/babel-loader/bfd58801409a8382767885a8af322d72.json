{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benji\\\\mern-app\\\\Univent\\\\frontend\\\\src\\\\places\\\\pages\\\\UpdatePlace.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './PlaceForm.css';\nconst DUMMY_PLACES = [{\n  id: 'p1',\n  title: 'Empire State Building',\n  description: 'One of the most famous sky scrapers in the world!',\n  imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/NYC_Empire_State_Building.jpg/640px-NYC_Empire_State_Building.jpg',\n  address: '20 W 34th St, New York, NY 10001',\n  location: {\n    lat: 40.7484405,\n    lng: -73.9878584\n  },\n  creator: 'u1'\n}, {\n  id: 'p2',\n  title: 'Emp. State Building',\n  description: 'One of the most famous sky scrapers in the world!',\n  imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/NYC_Empire_State_Building.jpg/640px-NYC_Empire_State_Building.jpg',\n  address: '20 W 34th St, New York, NY 10001',\n  location: {\n    lat: 40.7484405,\n    lng: -73.9878584\n  },\n  creator: 'u2'\n}];\n/* Hooks allow you to add various functionalities to function components,\r\n    useState()- hook allows us to register state which then is managed inside ofa  component, when state is changed, the component re-renders(re-evaulated and might be lead to re-rendering of DOM)\r\n    \r\n    useEffect() - does something different: It allows you to register some logic (i.e. a JS function) which will be executed when certain dependencies - which you define - change.\r\n    useEffect() re-evaluates the dependency values whenever the component in which you use useEffect() is re-evaluated (i.e. whenever the component's props or state changed).\r\nIf the component is re-evaluated and the dependencies did NOT change, the logic in useEffect() won't run again.\r\nImportant: The useEffect() logic re-runs AFTER the component (including its JSX code) was re-evaluated. That means, that the first execution of the useEffect() logic \r\n(when a component mounts for the first time) will ALWAYS happen AFTER the component rendered for the first time.\r\n    */\n\nconst UpdatePlace = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const placeId = useParams().placeId; //gets params from the url, the id of the place, extracted from  <Rout path=\"/places/:placeId\">\n\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId); //finds a place from dummy places with id of url\n\n  useEffect(() => {\n    if (identifiedPlace) {\n      setFormData({\n        title: {\n          value: identifiedPlace.title,\n          isValid: true\n        },\n        description: {\n          value: identifiedPlace.description,\n          isValid: true\n        }\n      }, true);\n    }\n\n    setIsLoading(false);\n  }, [setFormData, identifiedPlace]);\n\n  const placeUpdateSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  if (!identifiedPlace) {\n    //if the place wasn't found\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, \"Could not find place!\")));\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, \"Loading...\"));\n  } //return a form for updating a place\n\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: placeUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: inputHandler,\n    initialValue: formState.inputs.title.value //old value\n    ,\n    initialValid: formState.inputs.title.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (min. 5 characters).\",\n    onInput: inputHandler,\n    initialValue: formState.inputs.description.value,\n    initialValid: formState.inputs.description.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, \"UPDATE PLACE\"));\n};\n\nexport default UpdatePlace;","map":{"version":3,"sources":["C:/Users/benji/mern-app/Univent/frontend/src/places/pages/UpdatePlace.js"],"names":["React","useEffect","useState","useParams","Input","Button","Card","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","DUMMY_PLACES","id","title","description","imageUrl","address","location","lat","lng","creator","UpdatePlace","isLoading","setIsLoading","placeId","formState","inputHandler","setFormData","value","isValid","identifiedPlace","find","p","placeUpdateSubmitHandler","event","preventDefault","console","log","inputs"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH\r\n} from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport './PlaceForm.css';\r\n\r\nconst DUMMY_PLACES = [\r\n  {\r\n    id: 'p1',\r\n    title: 'Empire State Building',\r\n    description: 'One of the most famous sky scrapers in the world!',\r\n    imageUrl:\r\n      'https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/NYC_Empire_State_Building.jpg/640px-NYC_Empire_State_Building.jpg',\r\n    address: '20 W 34th St, New York, NY 10001',\r\n    location: {\r\n      lat: 40.7484405,\r\n      lng: -73.9878584\r\n    },\r\n    creator: 'u1'\r\n  },\r\n  {\r\n    id: 'p2',\r\n    title: 'Emp. State Building',\r\n    description: 'One of the most famous sky scrapers in the world!',\r\n    imageUrl:\r\n      'https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/NYC_Empire_State_Building.jpg/640px-NYC_Empire_State_Building.jpg',\r\n    address: '20 W 34th St, New York, NY 10001',\r\n    location: {\r\n      lat: 40.7484405,\r\n      lng: -73.9878584\r\n    },\r\n    creator: 'u2'\r\n  }\r\n];\r\n/* Hooks allow you to add various functionalities to function components,\r\n    useState()- hook allows us to register state which then is managed inside ofa  component, when state is changed, the component re-renders(re-evaulated and might be lead to re-rendering of DOM)\r\n    \r\n    useEffect() - does something different: It allows you to register some logic (i.e. a JS function) which will be executed when certain dependencies - which you define - change.\r\n    useEffect() re-evaluates the dependency values whenever the component in which you use useEffect() is re-evaluated (i.e. whenever the component's props or state changed).\r\nIf the component is re-evaluated and the dependencies did NOT change, the logic in useEffect() won't run again.\r\nImportant: The useEffect() logic re-runs AFTER the component (including its JSX code) was re-evaluated. That means, that the first execution of the useEffect() logic \r\n(when a component mounts for the first time) will ALWAYS happen AFTER the component rendered for the first time.\r\n    */\r\nconst UpdatePlace = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const placeId = useParams().placeId; //gets params from the url, the id of the place, extracted from  <Rout path=\"/places/:placeId\">\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: '',\r\n        isValid: false\r\n      },\r\n      description: {\r\n        value: '',\r\n        isValid: false\r\n      }\r\n    },\r\n    false\r\n  );\r\n\r\n  const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId); //finds a place from dummy places with id of url\r\n\r\n  useEffect(() => {\r\n    if (identifiedPlace) {\r\n      setFormData(\r\n        {\r\n          title: {\r\n            value: identifiedPlace.title,\r\n            isValid: true\r\n          },\r\n          description: {\r\n            value: identifiedPlace.description,\r\n            isValid: true\r\n          }\r\n        },\r\n        true\r\n      );\r\n    }\r\n    setIsLoading(false);\r\n  }, [setFormData, identifiedPlace]);\r\n\r\n  const placeUpdateSubmitHandler = event => {\r\n    event.preventDefault();\r\n    console.log(formState.inputs);\r\n  };\r\n\r\n  if (!identifiedPlace) { //if the place wasn't found\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Could not find place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <h2>Loading...</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //return a form for updating a place\r\n  return (\r\n    <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n      <Input\r\n        id=\"title\"\r\n        element=\"input\"\r\n        type=\"text\"\r\n        label=\"Title\"\r\n        validators={[VALIDATOR_REQUIRE()]}\r\n        errorText=\"Please enter a valid title.\"\r\n        onInput={inputHandler}\r\n        initialValue={formState.inputs.title.value} //old value\r\n        initialValid={formState.inputs.title.isValid} \r\n      />\r\n      <Input\r\n        id=\"description\"\r\n        element=\"textarea\"\r\n        label=\"Description\"\r\n        validators={[VALIDATOR_MINLENGTH(5)]}\r\n        errorText=\"Please enter a valid description (min. 5 characters).\"\r\n        onInput={inputHandler}\r\n        initialValue={formState.inputs.description.value}\r\n        initialValid={formState.inputs.description.isValid}\r\n      />\r\n      <Button type=\"submit\" disabled={!formState.isValid}>\r\n        UPDATE PLACE\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UpdatePlace;\r\n"]},"metadata":{},"sourceType":"module"}