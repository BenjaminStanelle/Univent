{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benji\\\\mern-app\\\\Univent\\\\frontend\\\\src\\\\shared\\\\components\\\\FormElements\\\\Input.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport { validate } from '../../util/validators';\nimport './Input.css';\n/* Hooks allow you to add various functionalities to function components,\r\n    useState()- hook allows us to register state which then is managed inside ofa  component, when state is changed, the component re-renders(re-evaulated and might be lead to re-rendering of DOM)\r\n    \r\n    useEffect() - does something different: It allows you to register some logic (i.e. a JS function) which will be executed when certain dependencies - which you define - change.\r\n    useEffect() re-evaluates the dependency values whenever the component in which you use useEffect() is re-evaluated (i.e. whenever the component's props or state changed).\r\nIf the component is re-evaluated and the dependencies did NOT change, the logic in useEffect() won't run again.\r\nImportant: The useEffect() logic re-runs AFTER the component (including its JSX code) was re-evaluated. That means, that the first execution of the useEffect() logic \r\n(when a component mounts for the first time) will ALWAYS happen AFTER the component rendered for the first time.\r\n    */\n//useReducer() allows you to manage state in a component and gives function you can call and render the component,\n// can manage more complex state with ease or connected state when useState cannot\n//useReducer() receives action and current state, update the current state based off action we received, return the new state and \n//use reducer will return the new state and re-render the component\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case 'TOUCH':\n      {\n        return { ...state,\n          isTouched: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n  const {\n    id,\n    onInput\n  } = props;\n  const {\n    value,\n    isValid\n  } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]); //triggered whenever the user enters something\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  }; // we can decide from outside what element holds, if \"input\" it stores input(receives props: id, type, placeholder, onchangeHandler), else textarea\n  // we can render a text input field or text area if we <Input element = \"input\">\n\n\n  const element = props.element === 'input' ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }); //htmlFor translated to for attribute once rendered to the dom, props.id and props.label passed to htmlFor\n  //outputting the value of element below the label.\n  //if the inputstate is not valid and the input state is touched, then display errortext\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, props.label), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 55\n    }\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["C:/Users/benji/mern-app/Univent/frontend/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","initialValue","initialValid","id","onInput","changeHandler","event","target","touchHandler","element","placeholder","rows","label","errorText"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { validate } from '../../util/validators';\r\nimport './Input.css';\r\n\r\n\r\n/* Hooks allow you to add various functionalities to function components,\r\n    useState()- hook allows us to register state which then is managed inside ofa  component, when state is changed, the component re-renders(re-evaulated and might be lead to re-rendering of DOM)\r\n    \r\n    useEffect() - does something different: It allows you to register some logic (i.e. a JS function) which will be executed when certain dependencies - which you define - change.\r\n    useEffect() re-evaluates the dependency values whenever the component in which you use useEffect() is re-evaluated (i.e. whenever the component's props or state changed).\r\nIf the component is re-evaluated and the dependencies did NOT change, the logic in useEffect() won't run again.\r\nImportant: The useEffect() logic re-runs AFTER the component (including its JSX code) was re-evaluated. That means, that the first execution of the useEffect() logic \r\n(when a component mounts for the first time) will ALWAYS happen AFTER the component rendered for the first time.\r\n    */\r\n\r\n//useReducer() allows you to manage state in a component and gives function you can call and render the component,\r\n// can manage more complex state with ease or connected state when useState cannot\r\n//useReducer() receives action and current state, update the current state based off action we received, return the new state and \r\n//use reducer will return the new state and re-render the component\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE':\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators)\r\n      };\r\n    case 'TOUCH': {\r\n      return {\r\n        ...state,\r\n        isTouched: true\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = props => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue || '',\r\n    isTouched: false,\r\n    isValid: props.initialValid || false\r\n  });\r\n\r\n  const { id, onInput } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid)\r\n  }, [id, value, isValid, onInput]);\r\n\r\n  //triggered whenever the user enters something\r\n  const changeHandler = event => {\r\n    dispatch({\r\n      type: 'CHANGE',\r\n      val: event.target.value,\r\n      validators: props.validators\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type: 'TOUCH'\r\n    });\r\n  };\r\n\r\n  // we can decide from outside what element holds, if \"input\" it stores input(receives props: id, type, placeholder, onchangeHandler), else textarea\r\n  // we can render a text input field or text area if we <Input element = \"input\">\r\n  const element =\r\n    props.element === 'input' ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={props.id}\r\n        rows={props.rows || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    );\r\n      //htmlFor translated to for attribute once rendered to the dom, props.id and props.label passed to htmlFor\r\n      //outputting the value of element below the label.\r\n      //if the inputstate is not valid and the input state is touched, then display errortext\r\n  return (\r\n    <div\r\n      className={`form-control ${!inputState.isValid && inputState.isTouched &&\r\n        'form-control--invalid'}`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}