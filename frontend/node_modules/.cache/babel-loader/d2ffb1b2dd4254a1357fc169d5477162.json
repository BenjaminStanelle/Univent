{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benji\\\\mern-app\\\\Univent\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useCallback } from \"react\";\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\"; //these are for routing\n\nimport Users from \"./user/pages/Users\";\nimport NewPlace from \"./places/pages/NewPlace\";\nimport UserPlaces from \"./places/pages/UserPlaces\";\nimport UpdatePlace from \"./places/pages/UpdatePlace\";\nimport Auth from \"./user/pages/Auth\";\nimport MainNavigation from \"./shared/components/Navigation/MainNavigation\";\nimport { AuthContext } from \"./shared/context/auth-context\";\n\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const login = useCallback(() => {\n    setIsLoggedIn(true);\n  }, []);\n  const logout = useCallback(() => {\n    setIsLoggedIn(false);\n  }, []);\n  let routes;\n  /*<Route path=\"/\"> given a specific path in the url, components or pages between closing braces of \r\n  route will be rendered when that url starts with that specific path name\r\n  Add exact key word <Route path=\"/\" exact> for only that exact url to render components in that route\r\n   \r\n  Redirect component redirects to a url or page when the user enters a url that is not in the routes.\r\n  */\n  //switch route: when one route is true the rest of the routes will not be evaluated\n  //Triggered when user logged in, they are able to see all pages except log in\n\n  if (isLoggedIn) {\n    routes = /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Users, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/:userId/places\",\n      exact: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(UserPlaces, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/places/new\",\n      exact: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(NewPlace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/places/:placeId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(UpdatePlace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    })); //when user not logged in they are only able to see few pages\n    // <Route path=\"/:userId/places\" exact> the : means it is dynamic and you don't know the exact value yet.\n  } else {\n    routes = /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Users, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/:userId/places\",\n      exact: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(UserPlaces, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/auth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Auth, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/auth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      login: login,\n      logout: logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MainNavigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, routes)));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/benji/mern-app/Univent/frontend/src/App.js"],"names":["React","useState","useCallback","BrowserRouter","Router","Route","Redirect","Switch","Users","NewPlace","UserPlaces","UpdatePlace","Auth","MainNavigation","AuthContext","App","isLoggedIn","setIsLoggedIn","login","logout","routes"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Redirect,\r\n  Switch,\r\n} from \"react-router-dom\";\r\n//these are for routing\r\n\r\nimport Users from \"./user/pages/Users\";\r\nimport NewPlace from \"./places/pages/NewPlace\";\r\nimport UserPlaces from \"./places/pages/UserPlaces\";\r\nimport UpdatePlace from \"./places/pages/UpdatePlace\";\r\nimport Auth from \"./user/pages/Auth\";\r\nimport MainNavigation from \"./shared/components/Navigation/MainNavigation\";\r\nimport { AuthContext } from \"./shared/context/auth-context\";\r\n\r\nconst App = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const login = useCallback(() => {\r\n    setIsLoggedIn(true);\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setIsLoggedIn(false);\r\n  }, []);\r\n\r\n  let routes;\r\n  /*<Route path=\"/\"> given a specific path in the url, components or pages between closing braces of \r\n  route will be rendered when that url starts with that specific path name\r\n  Add exact key word <Route path=\"/\" exact> for only that exact url to render components in that route\r\n   \r\n  Redirect component redirects to a url or page when the user enters a url that is not in the routes.\r\n  */\r\n  //switch route: when one route is true the rest of the routes will not be evaluated\r\n  //Triggered when user logged in, they are able to see all pages except log in\r\n  if (isLoggedIn) {\r\n    routes = (\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <Users />\r\n        </Route>\r\n        <Route path=\"/:userId/places\" exact>\r\n          <UserPlaces />\r\n        </Route>\r\n        <Route path=\"/places/new\" exact>\r\n          <NewPlace />\r\n        </Route>\r\n        <Route path=\"/places/:placeId\">\r\n          <UpdatePlace />\r\n        </Route>\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    );\r\n    //when user not logged in they are only able to see few pages\r\n    // <Route path=\"/:userId/places\" exact> the : means it is dynamic and you don't know the exact value yet.\r\n  } else {\r\n    routes = (\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <Users />\r\n        </Route>\r\n        <Route path=\"/:userId/places\" exact>\r\n          <UserPlaces />\r\n        </Route>\r\n        <Route path=\"/auth\">\r\n          <Auth />\r\n        </Route>\r\n        <Redirect to=\"/auth\" />\r\n      </Switch>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ isLoggedIn: isLoggedIn, login: login, logout: logout }}\r\n    >\r\n      <Router>\r\n        <MainNavigation />\r\n        <main>{routes}</main>\r\n      </Router>\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}